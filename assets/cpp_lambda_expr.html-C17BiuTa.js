import{_ as s,c as a,b as p,o as e}from"./app-CkPgLnmy.js";const t={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="杂项之-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#杂项之-lambda-表达式"><span>杂项之 Lambda 表达式</span></a></h1><p><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/lambda-expressions-in-cpp?view=msvc-170" target="_blank" rel="noopener noreferrer">原文连接</a></p><h2 id="lambda-的构成" tabindex="-1"><a class="header-anchor" href="#lambda-的构成"><span>Lambda 的构成</span></a></h2><ol><li><p>Capture 字句：用户捕获在定义 Lambda 表达时需要的变量（所在作用域可见的变量）。</p><ul><li><p><code>[]</code>：不捕获任何变量；</p></li><li><p><code>[&amp;]</code>：通过引用捕获所有变量；</p></li><li><p><code>[=]</code>：通过值捕获所有变量。</p></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// 按引用捕获 total, 按值捕获 factor</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token operator">&amp;</span>total<span class="token punctuation">.</span> factor<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 作用同上</span></span>
<span class="line"><span class="token punctuation">[</span>factor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>total<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 仅按值捕获 facotr, 其他则按引用捕获</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> factor<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 仅按引用捕获 total，其他则按值捕获</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>total<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 &amp;, = 指示默认捕获模式时需作为首个元素</span></span>
<span class="line"><span class="token comment">// 使用默认捕获模式时，不能再使用相应的标识符来标记变量</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>total<span class="token punctuation">]</span> <span class="token comment">// Error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数列表（可选）：在调用 Lambda 表达式需要提供的输入参数。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">auto</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>mutable 规范</p></li><li><p>exception-specification 异常说明（规范）：用于指示 lambda 表达式可能产生的异常；</p><p>当然，你也可以使用 <code>nonexcept</code> 来指示 Lambda 表达式不会引发任何异常。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">auto</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// Warning !</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>trailing-return-type 尾置返回类型</p><p>你可以使用 auto 加 TRT 来实现 Lambda 表达式返回类型的推断。默认，如果 Lambda 表达式仅包含单个返回语句，编译器将从返回表达式推导返回类型；否则，将会推导为 void。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// Return Type: int</span></span>
<span class="line"><span class="token keyword">auto</span> x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Return Type: void</span></span>
<span class="line"><span class="token comment">// 无法从值列表推导类型</span></span>
<span class="line"><span class="token keyword">auto</span> x2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Lambda 函数体</p><p>Lambda 表达式之恶能捕获具有自动存储持续时间的变量， 但可以在 Lambda 表达式中使用具有静态存储时间的变量。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">fillVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> ivec<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">int</span> nextValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 访问静态存储时间的变量</span></span>
<span class="line">    <span class="token function">generate</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> nextValue<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="constexpr-lmabda-表达式" tabindex="-1"><a class="header-anchor" href="#constexpr-lmabda-表达式"><span>constexpr Lmabda 表达式</span></a></h2><p>当由 Lamdab 表达式引入的或者不获得数据成员为 constexpr 时，我们可以将 Lambda 修饰为 constexpr 并将其用在任何可以使用 constexpr 的地方。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">auto</span> answer <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">constexpr</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> y <span class="token operator">+</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">Increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 隐式的 constexpr Lambda 表达式</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/cpp/cpp_lambda_expr.html","title":"杂项之 Lambda 表达式","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752157449000,"contributors":[{"name":"mgkl92","username":"mgkl92","email":"zst_lff@126.com","commits":1,"url":"https://github.com/mgkl92"}],"changelog":[{"hash":"fe3e92b79c5ccc97720e31b2002a0ab509a32be5","time":1752157449000,"email":"zst_lff@126.com","author":"mgkl92","message":"Add more notes"}]},"filePathRelative":"cpp/cpp_lambda_expr.md"}');export{i as comp,u as data};
