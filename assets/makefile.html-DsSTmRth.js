import{_ as a,c as n,b as e,o as l}from"./app-CkPgLnmy.js";const i={};function p(c,s){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="makefile-基础" tabindex="-1"><a class="header-anchor" href="#makefile-基础"><span>Makefile 基础</span></a></h1><h3 id="构建-规则、目标和依赖" tabindex="-1"><a class="header-anchor" href="#构建-规则、目标和依赖"><span>（构建）规则、目标和依赖</span></a></h3><p>规则由目标（Targets）、依赖（prerequisites / dependencies）和命令三部分组成；其中，目标为构建规则需要生成的文件、依赖为生成目标文件所需要的依赖文件，而命令指导构建系统如何使用依赖文件生成目标文件。</p><p>其基本语法如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    targets <span class="token builtin class-name">:</span> prerequisites</span>
<span class="line">        command<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="make-的本质" tabindex="-1"><a class="header-anchor" href="#make-的本质"><span>Make 的本质</span></a></h3><p>首先，应该明白，<strong>目标 ≠ 文件</strong>，且当执行构建规则时，其最终期望的结果是生成与目标同名的文件。</p><p>构建规则在以下两种情况尝试运行规则中的命令去构建目标文件：</p><ol><li>构建目标文件尚未生成；</li><li><strong>构建目标依赖文件在目标文件生成后发生变更（构建系统对比目标文件与依赖文件的时间戳）。</strong></li></ol><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><p>Make 中，变量只能为字符串（即仅支持字符串类型）；且 Make 并不识别引号（单引号或双引号），即引号对 Make 无特殊含义。</p><p>其基本语法为</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    <span class="token comment"># 定义变量</span></span>
<span class="line">    var :<span class="token operator">=</span> val</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 引用变量</span></span>
<span class="line">    <span class="token variable"><span class="token variable">$(</span>var<span class="token variable">)</span></span> or <span class="token variable">\${var}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong><code>=</code> 递归赋值</strong></p><p>当且仅当命令执行时，定义该变量；</p></li><li><p><strong><code>:=</code> 展开赋值</strong></p><p>该方式允许你追加变量；且在变量定义时，直接对变量展开。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    one <span class="token operator">=</span> hello</span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># hello -&gt; hello there</span></span>
<span class="line">    one :<span class="token operator">=</span> <span class="token variable">\${one}</span> there</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># \`one = \${one} there\` will cause an error.</span></span>
<span class="line"></span>
<span class="line">    all: </span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>one<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>+=</code> 追加赋值</strong></p></li><li><p><strong><code>?=</code> 仅当变量未定义时定义该变量</strong></p></li></ol><blockquote><p>注：当引用未定义变量时，其值为空。</p></blockquote><h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符"><span>通配符</span></a></h3><ol><li><p><code>*</code> 用于搜索文件系统以匹配文件名称；但未匹配到任何文件名时，该通配符会保留；因此，<code>*</code> 一般不直接使用，通过与 <code>wildcard</code> 函数组合使用。</p><p>如</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    <span class="token comment"># 匹配所有 .c 文件</span></span>
<span class="line">    <span class="token variable"><span class="token variable">$(</span>wildcard *.c<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>%</code> 当处于 <strong>匹配模式</strong> 时，该通配符会将匹配到的一个或多个字符串作为 <em>词干（stem）</em>；当处于 <strong>替换模式</strong> 时，该通配符会将匹配位置替换为词干。</p></li></ol><h3 id="自动变量" tabindex="-1"><a class="header-anchor" href="#自动变量"><span>自动变量</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    <span class="token comment"># 目标名称（当有多个目标时，匹配当前生成目标）</span></span>
<span class="line">    <span class="token variable">$@</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 所有时间戳比目标文件新的依赖文件</span></span>
<span class="line">    <span class="token variable">$?</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 所有依赖文件</span></span>
<span class="line">    $^</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 第一个依赖文件</span></span>
<span class="line">    $<span class="token operator">&lt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="魔法规则" tabindex="-1"><a class="header-anchor" href="#魔法规则"><span>魔法规则</span></a></h3><ol><li><p><strong>隐式规则</strong></p><p>当需要相应依赖时，Make 将自动执行 <code>$(CC) -c $(CPPFLAGS) $(CFLAGS) $^ -o $@</code> 或 <code>$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $^ -o $@</code> 将相应的 <code>n.c</code> 文件或 <code>n.cc / n.cpp</code> 文件生成其相应的目标文件 <code>n.o</code>；此外，Make 也可以自动的执行 <code>$(CC) $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) -o $@</code> 为你将单个文件 <code>n.o</code> 链接到 <code>n</code>。</p></li><li><p><strong>静态模式规则</strong></p><p>基本语法为</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    targets<span class="token punctuation">..</span>.: target-pattern: prereq-patterns <span class="token punctuation">..</span>.</span>
<span class="line">        commands</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述规则会为所有的目标文件生成构建规则并为匹配的目标文件生成相应的依赖文件。</p><p>现假设有如下 Makefile 文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    objects <span class="token operator">=</span> foo.o bar.o all.result</span>
<span class="line">    all: <span class="token variable"><span class="token variable">$(</span>objects<span class="token variable">)</span></span></span>
<span class="line">        <span class="token variable"><span class="token variable">$(</span>CC<span class="token variable">)</span></span> $^ <span class="token parameter variable">-o</span> all</span>
<span class="line"></span>
<span class="line">    <span class="token variable"><span class="token variable">$(</span>objects<span class="token variable">)</span></span><span class="token builtin class-name">:</span> %.o: %.c</span>
<span class="line">        <span class="token variable"><span class="token variable">$(</span>CC<span class="token variable">)</span></span> <span class="token parameter variable">-c</span> $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span></span>
<span class="line"></span>
<span class="line">    all.c:</span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;int main() { return 0; }&quot;</span> <span class="token operator">&gt;</span> all.c</span>
<span class="line"></span>
<span class="line">    %.c:</span>
<span class="line">        <span class="token function">touch</span> <span class="token variable">$@</span></span>
<span class="line"></span>
<span class="line">    clean:</span>
<span class="line">        <span class="token function">rm</span> <span class="token parameter variable">-f</span> *.c *.o all</span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Outputs</span></span>
<span class="line">    <span class="token comment">#    Makefile:8: target &#39;all.result&#39; doesn&#39;t match the target pattern</span></span>
<span class="line">    <span class="token comment">#    touch foo.c</span></span>
<span class="line">    <span class="token comment">#    cc -c foo.c -o foo.o</span></span>
<span class="line">    <span class="token comment">#    touch bar.c</span></span>
<span class="line">    <span class="token comment">#    cc -c bar.c -o bar.o</span></span>
<span class="line">    <span class="token comment">#    cc -c  -o all.result</span></span>
<span class="line">    <span class="token comment">#    cc: fatal error: no input files</span></span>
<span class="line">    <span class="token comment">#    compilation terminated.</span></span>
<span class="line">    <span class="token comment">#    make: *** [Makefile:9: all.result] Error 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>过滤函数 <code>filter</code></strong></p><p>上述问题可以先对目标文件使用过滤函数 <code>filter</code> 解决。</p><p>基本语法为</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    <span class="token variable"><span class="token variable">$(</span>filter %.o,<span class="token punctuation">$(</span>obj_files<span class="token punctuation">)</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span> %.o: %.c</span>
<span class="line">        <span class="token variable"><span class="token variable">$(</span>CC<span class="token variable">)</span></span> <span class="token parameter variable">-c</span> $^ <span class="token parameter variable">-o</span> <span class="token variable">$@</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>模式规则</strong></p><p>该规则相较静态模式规则和过滤函数更为通用。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    %.o <span class="token builtin class-name">:</span> %.c</span>
<span class="line">	<span class="token variable"><span class="token variable">$(</span>CC<span class="token variable">)</span></span> <span class="token parameter variable">-c</span> <span class="token variable"><span class="token variable">$(</span>CFLAGS<span class="token variable">)</span></span> <span class="token variable"><span class="token variable">$(</span>CPPFLAGS<span class="token variable">)</span></span> $<span class="token operator">&lt;</span> <span class="token parameter variable">-o</span> <span class="token variable">$@</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>双冒号（::）规则</strong></p><p>该规则允许为同一目标定义多个规则。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    all: blah</span>
<span class="line"></span>
<span class="line">    blah::</span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line">    blah::</span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;hello again&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="命令与执行" tabindex="-1"><a class="header-anchor" href="#命令与执行"><span>命令与执行</span></a></h3><ol><li><p>默认情况下，Make 会在执行规则中的命令前将其输出到控制台。在命令前使用 <code>@</code> 可以禁止该行为（仅对当前命令有效）；使用 <code>make</code> 的 <code>-s</code> 选项会为每条命令的执行添加 <code>@</code>；</p></li><li><p><strong>每条命令的执行都使用新的 <code>shell</code></strong>；</p></li><li><p><code>$</code> 在 Make 中有特殊含义，故可使用 <code>$$</code> 作为 <code>$</code> 的转译；</p></li><li><p>使用 <code>$(MAKE)</code> 可以递归的执行构建过程，如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    new_contents <span class="token operator">=</span> <span class="token string">&quot;hello:<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\t">\\t</span>touch inside_file&quot;</span></span>
<span class="line">    all:</span>
<span class="line">        <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> subdir</span>
<span class="line">        <span class="token builtin class-name">printf</span> <span class="token variable"><span class="token variable">$(</span>new_contents<span class="token variable">)</span></span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/^ //&#39;</span> <span class="token operator">&gt;</span> subdir/makefile</span>
<span class="line">        <span class="token builtin class-name">cd</span> subdir <span class="token operator">&amp;&amp;</span> <span class="token variable"><span class="token variable">$(</span>MAKE<span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">    clean:</span>
<span class="line">        <span class="token function">rm</span> <span class="token parameter variable">-rf</span> subdir</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>export</code></p><p>当 Make 构建时，它在其当前环境变量的基础上创建 Make 变量，如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    <span class="token comment"># Run this with &quot;export shell_env_var=&#39;I am an environment variable&#39;; make&quot;</span></span>
<span class="line">    all:</span>
<span class="line">        <span class="token comment"># Print out the Shell variable</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token variable">$$</span>shell_env_var</span>
<span class="line"></span>
<span class="line">        <span class="token comment"># Print out the Make variable</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>shell_env_var<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，你可以使用 <code>export</code> 命令将 Make 变量导出到环境变量中以供当前 <code>shell</code> 使用；因此，Make 的这种特性使得其能够调用子进程执行子构建时共享某些变量，如</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    <span class="token assign-left variable">shell_env_var</span><span class="token operator">=</span>Shell <span class="token function">env</span> var, created inside of Make</span>
<span class="line">    <span class="token builtin class-name">export</span> shell_env_var</span>
<span class="line">    all:</span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>shell_env_var<span class="token variable">)</span></span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token variable">$$</span>shell_env_var</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.EXPORT_ALL_VARIABLES</code> 会自动为你导出所有 Make 变量。</p></li><li><p><strong><code>define</code> 与命令列表</strong></p><p><code>define</code> 允许你定义变量来存储命令列表（多条命令）。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    one <span class="token operator">=</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">blah</span><span class="token operator">=</span><span class="token string">&quot;I was set!&quot;</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$$</span>blah</span>
<span class="line"></span>
<span class="line">    define two</span>
<span class="line">    <span class="token builtin class-name">export</span> <span class="token assign-left variable">blah</span><span class="token operator">=</span><span class="token string">&quot;I was set!&quot;</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token variable">$$</span>blah</span>
<span class="line">    endef</span>
<span class="line"></span>
<span class="line">    all: </span>
<span class="line">        @echo <span class="token string">&quot;This prints &#39;I was set&#39;&quot;</span></span>
<span class="line">        @<span class="token variable"><span class="token variable">$(</span>one<span class="token variable">)</span></span></span>
<span class="line">        @echo <span class="token string">&quot;This does not print &#39;I was set&#39; because each command runs in a separate shell&quot;</span></span>
<span class="line">        @<span class="token variable"><span class="token variable">$(</span>two<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="条件控制" tabindex="-1"><a class="header-anchor" href="#条件控制"><span>条件控制</span></a></h3><ol><li><p><code>ifeq...else...endif</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    foo <span class="token operator">=</span> ok</span>
<span class="line"></span>
<span class="line">    all:</span>
<span class="line">    ifeq <span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>foo<span class="token variable">)</span></span>, ok<span class="token punctuation">)</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;foo equals ok&quot;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;nope&quot;</span></span>
<span class="line">    endif</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>ifneq...endif</code></p></li></ol><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><p>函数调用形如 <code>$(fn, args)</code> 或 <code>\${fn, args}</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    <span class="token comment"># 所有的匹配字符均会被替换！！！</span></span>
<span class="line">    bar :<span class="token operator">=</span> <span class="token variable">\${subst not<span class="token operator">,</span>&quot;totally&quot;<span class="token operator">,</span> &quot;I am not superman&quot;}</span></span>
<span class="line">    all: </span>
<span class="line">	    @echo <span class="token variable"><span class="token variable">$(</span>bar<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>字符替换 <code>$(patsubst pattern,replacement,text)</code></strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    foo :<span class="token operator">=</span> a.o b.o l.a c.o</span>
<span class="line">    one :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>patsubst %.o,%.c,<span class="token punctuation">$(</span>foo<span class="token punctuation">)</span><span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Result -&gt; one := a.c b.c l.a c.c</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>循环 <code>$(foreach var,list,text)</code></strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    foo :<span class="token operator">=</span> <span class="token function">who</span> are you</span>
<span class="line">    bar :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>foreach wrd,<span class="token punctuation">$(</span>foo<span class="token punctuation">)</span>,<span class="token punctuation">$(</span>wrd<span class="token punctuation">)</span><span class="token operator">!</span><span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">     <span class="token comment"># Result -&gt; foo := who! are! you!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>空字符串判断 <code>\${if arg, then, else}</code></strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    foo :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span><span class="token keyword">if</span> this-is-not-empty,then<span class="token operator">!</span>,else<span class="token operator">!</span><span class="token variable">)</span></span></span>
<span class="line">    empty :<span class="token operator">=</span></span>
<span class="line">    bar :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span><span class="token keyword">if</span> <span class="token punctuation">$(</span>empty<span class="token punctuation">)</span>,then<span class="token operator">!</span>,else<span class="token operator">!</span><span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">    all:</span>
<span class="line">        @echo <span class="token variable"><span class="token variable">$(</span>foo<span class="token variable">)</span></span></span>
<span class="line">        @echo <span class="token variable"><span class="token variable">$(</span>bar<span class="token variable">)</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Outputs</span></span>
<span class="line">    <span class="token comment">#   then!</span></span>
<span class="line">    <span class="token comment">#   else!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>过滤函数 <code>\${filter pattern, arg}</code></strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    obj_files <span class="token operator">=</span> foo.result bar.o lose.o</span>
<span class="line">    filtered_files <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>filter %.o,<span class="token punctuation">$(</span>obj_files<span class="token punctuation">)</span><span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">    all:</span>
<span class="line">        @echo <span class="token variable"><span class="token variable">$(</span>filtered_files<span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Result -&gt; filtered_files = bar.o lose.o</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>自定义函数调用 \${call fn_name, arg(s)}</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    sweet_new_fn <span class="token operator">=</span> Variable Name: <span class="token variable"><span class="token variable">$(</span><span class="token number">0</span><span class="token variable">)</span></span> First: <span class="token variable"><span class="token variable">$(</span><span class="token number">1</span><span class="token variable">)</span></span> Second: <span class="token variable"><span class="token variable">$(</span><span class="token number">2</span><span class="token variable">)</span></span> Empty Variable: <span class="token variable"><span class="token variable">$(</span><span class="token number">3</span><span class="token variable">)</span></span></span>
<span class="line">    all:</span>
<span class="line">        @echo <span class="token variable"><span class="token variable">$(</span>call sweet_new_fn, go, tigers<span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Outputs &quot;Variable Name: sweet_new_fn First: go Second: tigers Empty Variable:&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>执行 <code>shell</code> 命令 <code>\${shell command(s)}</code></strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    all: </span>
<span class="line">        @echo <span class="token variable"><span class="token variable">$(</span>shell <span class="token function">ls</span> <span class="token parameter variable">-la</span><span class="token variable">)</span></span> <span class="token comment"># Very ugly because the newlines are gone!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="其他特性" tabindex="-1"><a class="header-anchor" href="#其他特性"><span>其他特性</span></a></h3><ol><li><p><strong><code>include</code> 指令</strong> 允许 Make 读取多个 makefile。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    include filenames<span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong><code>vpath</code> 指令</strong></p><p>默认情况下，Make 会在当前工作目录查找依赖文件；<strong>而 vpath 允许指定在指定目录查找依赖文件</strong>。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">     <span class="token comment"># Syntax</span></span>
<span class="line">     vpath <span class="token operator">&lt;</span>pattern<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>directories<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">     <span class="token comment"># Example</span></span>
<span class="line">     vpath %.h <span class="token punctuation">..</span>/headers <span class="token punctuation">..</span>/other-directory</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>.PHONY</code> 伪目标</p><p>当 Make 中存在与伪目标同名的目标文件时，该伪目标将失效；因为伪目标没有依赖文件，故其相应命令将永远得不到执行。</p><p>Make 提供了 <code>.PHONY</code> 以避免上述问题。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    .PHONY: clean</span>
<span class="line">    clean:</span>
<span class="line">        <span class="token function">rm</span> <span class="token parameter variable">-f</span> some_file</span>
<span class="line">        <span class="token function">rm</span> <span class="token parameter variable">-f</span> clean</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>.DELETE_ON_ERROR</code></p><p>该特性使得 Make 在某条构建规则中的某个命令失败时（非零返回值），将删除相应的目标文件。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">    .DELETE_ON_ERROR:</span>
<span class="line">    all: one</span>
<span class="line"></span>
<span class="line">    one:</span>
<span class="line">        <span class="token function">touch</span> one</span>
<span class="line">        <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Outputs</span></span>
<span class="line">    <span class="token comment">#    touch one</span></span>
<span class="line">    <span class="token comment">#    false</span></span>
<span class="line">    <span class="token comment">#    make: *** [Makefile:6: one] Error 1</span></span>
<span class="line">    <span class="token comment">#    make: *** Deleting file &#39;one&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,31)]))}const r=a(i,[["render",p]]),o=JSON.parse('{"path":"/tool/makefile.html","title":"Makefile 基础","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752157449000,"contributors":[{"name":"mgkl92","username":"mgkl92","email":"zst_lff@126.com","commits":1,"url":"https://github.com/mgkl92"}],"changelog":[{"hash":"fe3e92b79c5ccc97720e31b2002a0ab509a32be5","time":1752157449000,"email":"zst_lff@126.com","author":"mgkl92","message":"Add more notes"}]},"filePathRelative":"tool/makefile.md"}');export{r as comp,o as data};
