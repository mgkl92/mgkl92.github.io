import{_ as s,c as a,b as p,o as t}from"./app-CkPgLnmy.js";const e={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h1><h2 id="并查集" tabindex="-1"><a class="header-anchor" href="#并查集"><span>并查集</span></a></h2><p>并查集用于管理元素的集合所属问题。</p><p>一个集合由一棵树构成，属于相同集合的元素位于同一棵树上，它们有相同的根结点；而属于不同集合的元素位于不同的树上。</p><p>所以，维护元素的集合所属问题在本质上是维护一个森林。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// 初始化操作</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">dsu</span> <span class="token punctuation">{</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>size_t<span class="token operator">&gt;</span> pa<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">explicit</span> <span class="token function">dsu</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">pa</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 初始时，每个元素都位于单独的集合</span></span>
<span class="line">        <span class="token comment">// 为了区别不同的根，将所有结点的根初始为自己</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span><span class="token function">iota</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pa<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    size_t <span class="token function">find</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">unite</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">,</span> size_t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">,</span> size_t y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 查询操作</span></span>
<span class="line">size_t dsu<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 递归的查询父结点的根结点直至到达当根节点</span></span>
<span class="line">    <span class="token keyword">return</span> pa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token function">find</span><span class="token punctuation">(</span>pa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 路径压缩</span></span>
<span class="line">size_t dsu<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 将结点直接连接到根节点</span></span>
<span class="line">    <span class="token keyword">return</span> pa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">?</span> x <span class="token operator">:</span> pa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>pa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 合并两个集合</span></span>
<span class="line"><span class="token keyword">void</span> dsu<span class="token double-colon punctuation">::</span><span class="token function">unite</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">,</span> size_t y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    pa<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 合并优化</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">dsu</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用 size 记录每颗树上结点数目</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>size_t<span class="token operator">&gt;</span> pa<span class="token punctuation">,</span> size<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">unite</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">,</span> size_t y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> dsu<span class="token double-colon punctuation">::</span><span class="token function">unite</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">,</span> size_t y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> size<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    pa<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">    size<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 删除操作</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">dsu</span> <span class="token punctuation">{</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>size_t<span class="token operator">&gt;</span> pa<span class="token punctuation">,</span> size<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 为每个结点预先指定副本</span></span>
<span class="line">    <span class="token comment">// 初始化将每个结点指向其副本，不再指向其自身</span></span>
<span class="line">    <span class="token keyword">explicit</span> <span class="token function">dsu</span><span class="token punctuation">(</span>size_t size_<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">pa</span><span class="token punctuation">(</span>size_ <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size</span><span class="token punctuation">(</span>size_ <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span><span class="token function">iota</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> size_<span class="token punctuation">,</span> size_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span><span class="token function">iota</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> size_<span class="token punctuation">,</span> pa<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size_<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">--</span>size<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 让删除的元素指向自身</span></span>
<span class="line">        pa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 移动操作</span></span>
<span class="line"><span class="token keyword">void</span> dsu<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>size_t x<span class="token punctuation">,</span> size_t y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">auto</span> px <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> py <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">==</span> py<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将 x 所在集合移动到 y 所在集合</span></span>
<span class="line">    pa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> fy<span class="token punctuation">;</span></span>
<span class="line">    <span class="token operator">--</span>size<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token operator">++</span>size<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h2><p>堆在本质上是一颗树，树中的每个结点存储一个键值，且每个结点的键值都大于等于或小于等于其父结点的键值。</p><h3 id="二叉堆" tabindex="-1"><a class="header-anchor" href="#二叉堆"><span>二叉堆</span></a></h3><p>二叉堆是一颗完全二叉树。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// 索引从 1 开始，当根结点为 j 时，其父结点为 j / 2 向下取整， 例如 2 和 3 的父节点为 1。</span></span>
<span class="line"><span class="token comment">// h 代表大顶堆数组</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 插入操作</span></span>
<span class="line"><span class="token comment">// 向上调整：在堆数组末尾插入元素，动态的向上调整</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&gt;</span> h <span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        x <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 删除操作</span></span>
<span class="line"><span class="token comment">// 向下调整：交换堆顶与堆数组末尾元素，动态的向下调整，并删除堆数组末尾元素</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 令 t 指向 x 具有最大值的子节点</span></span>
<span class="line">        <span class="token keyword">int</span> t <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span>（t <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token operator">++</span>t<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 判断是否满足堆性质</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 迭代的调整子堆</span></span>
<span class="line">        x <span class="token operator">=</span> t<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 堆初始化</span></span>
<span class="line"><span class="token comment">// 不断地向堆中添加元素</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">up</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 自定向上不断地合并两个堆</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> n <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">down</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用：对顶堆</strong></p><p>动态的维护一个序列上第 k 大（小）的值， k 值可能动态变化。</p><p>对顶堆由一个大根堆和一个小根堆组成，其中</p><h2 id="单调栈" tabindex="-1"><a class="header-anchor" href="#单调栈"><span>单调栈</span></a></h2><p>单调栈是满足单调性质的栈结构。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">std<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token comment">// 在插入元素时，为了维护栈中元素的单调性质，需要弹出栈内元素值小于待插入元素的部分。</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单调队列" tabindex="-1"><a class="header-anchor" href="#单调队列"><span>单调队列</span></a></h2><p>单调队列时满足单调性质的队列结构，类似单调栈的思路。</p><h2 id="树状数组" tabindex="-1"><a class="header-anchor" href="#树状数组"><span>树状数组</span></a></h2><p>树状数组是一种支持单点修改和区间查询的数据结构。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="线段树" tabindex="-1"><a class="header-anchor" href="#线段树"><span>线段树</span></a></h2><h2 id="二叉搜索树-bst" tabindex="-1"><a class="header-anchor" href="#二叉搜索树-bst"><span>二叉搜索树 BST</span></a></h2><p><strong>基本定义</strong></p><ul><li><p>空树是二叉搜索树；</p></li><li><p>如果左子树不为空，则左子树上所有结点的权值小于其根结点；</p></li><li><p>如果右子树不为空，则右子树上所有结点的权值大于其根节点；</p></li><li><p>二叉搜索树的左右子树均为二叉搜索树。</p></li></ul><p><strong>代码实现</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// 结点定义</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> key<span class="token punctuation">;</span> <span class="token comment">// 权值</span></span>
<span class="line">    TreeNode <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// 以当前结点为根的子树中的结点数目</span></span>
<span class="line">    <span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment">// 权值重复数量</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// BST 的中序遍历的权值序列具有单调不减的性质！</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-&gt;</span>key <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 最值查询</span></span>
<span class="line"><span class="token comment">// 根据平衡二叉树的性质，其最小值和最大值分别存储于最左侧叶子和最右侧叶子结点上</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 元素查询</span></span>
<span class="line"><span class="token comment">// 二叉搜索树允许我们以二分形式对树中的元素数据进行查询</span></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 查找左子树</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 查找右子树</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 元素插入</span></span>
<span class="line"><span class="token comment">// 通过二分查找方法确定元素的插入位置</span></span>
<span class="line">TreeNode<span class="token operator">*</span> <span class="token function">insert</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">++</span>root<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 在左子树中插入</span></span>
<span class="line">        root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 在右子树中插入</span></span>
<span class="line">        root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> root<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 元素删除</span></span>
<span class="line">TreeNode<span class="token operator">*</span> <span class="token function">erase</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> root<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token operator">--</span>root<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 左节点为空</span></span>
<span class="line">                TreeNode <span class="token operator">*</span>p <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">delete</span> root<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> p<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 右节点为空</span></span>
<span class="line">                TreeNode <span class="token operator">*</span>p <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">delete</span> root<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> p<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 非叶子结点</span></span>
<span class="line">                <span class="token comment">// 使用右子树的最小代值结点替当前结点（此处也可以使用左子树的最大值结点）</span></span>
<span class="line">                TreeNode <span class="token operator">*</span> q <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                root<span class="token operator">-&gt;</span>key <span class="token operator">=</span> q<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span></span>
<span class="line">                root<span class="token operator">-&gt;</span>count <span class="token operator">=</span> q<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span></span>
<span class="line">                root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">erase</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">erase</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">erase</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 更新结点数目信息</span></span>
<span class="line">    root<span class="token operator">-&gt;</span>size <span class="token operator">=</span> root<span class="token operator">-&gt;</span>count </span>
<span class="line">        <span class="token operator">+</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">?</span> root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">+</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right <span class="token operator">?</span> root<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> root<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 元素排名</span></span>
<span class="line"><span class="token comment">// 排名定义为将数组元素升序排序后第一个相同元素之前的数的个数加一</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getRank</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">?</span> root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>key <span class="token operator">&gt;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">getRank</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">getRank</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">?</span> root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">rank</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 在左子树中查询排名为 k 的元素</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 当前结点为为排名为 k </span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>size <span class="token operator">+</span> root<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 避免 k 计算为 0</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">rank</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left <span class="token operator">?</span> root<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>size <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> root<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="平衡二叉树" tabindex="-1"><a class="header-anchor" href="#平衡二叉树"><span>平衡二叉树</span></a></h3><p>在理想情况下，二叉搜索树的具有 O(log(n)) 的时间复杂度；但在最坏情况下，搜索树可能退化为链表，使得其时间复杂度为 O(n)。因此，为了使得二叉树的平均时间复杂度 O(log(n)) 级别，需要在结点插入和删除过程中动态的调正树的结构。</p><p><strong>二叉树调整操作</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">TreeNode<span class="token operator">*</span> <span class="token function">rorate_right</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    TreeNode<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span></span>
<span class="line">    root<span class="token operator">-&gt;</span>left <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span></span>
<span class="line">    temp<span class="token operator">-&gt;</span>left <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 更新树高度</span></span>
<span class="line">    <span class="token function">update_height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">update_height</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> temp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">TreeNode<span class="token operator">*</span> <span class="token function">rotate_left</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    TreeNode <span class="token operator">*</span>temp <span class="token operator">=</span> root<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span></span>
<span class="line">    root<span class="token operator">-&gt;</span>right <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span></span>
<span class="line">    temp<span class="token operator">-&gt;</span>right <span class="token operator">=</span> root<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">update_height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">update_height</span><span class="token punctuation">(</span>tmep<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> temp<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>四种破坏二叉树平衡的条件</strong></p><ul><li><p>LL 型</p><p>形成原因：T 的左子树的左子树过高</p><p>调整方式：右旋结点 T</p></li><li><p>RR 型</p><p>形成原因：T 的右子树的右子树过高</p><p>调整方式：左旋结点 T</p></li><li><p>LR 型</p><p>形成原因：T 的左子树的右子树过高</p><p>调整方式：先左旋结点 L，使其成为 LL 型；然后，再右旋结点 T</p></li><li><p>RL 型</p><p>形成原因：T 的右子树的左子树过高</p><p>调整方式：先右旋结点 R，使其成为 RR 型；然后，再左旋结点 T</p></li></ul><h3 id="avl-树" tabindex="-1"><a class="header-anchor" href="#avl-树"><span>AVL 树</span></a></h3><p>AVL 树是一种平衡的二叉搜索树。</p><p><strong>基本定义</strong></p><ul><li><p>空二叉树是一棵 AVL 树</p></li><li><p>如果 AVL 存在左右子树，那么其左右子树也是 AVL 树，且左右子树的高度差的决定是小于等于 1</p></li><li><p>AVL 树的高度为 O(log(n))</p></li></ul><h3 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B 树</span></a></h3><p><strong>基本定义</strong></p><ul><li><p>每个结点至多由 m 个子节点；</p></li><li><p>每一个非叶子结点至少有 (m + 1) / 2 个子结点，即 m / 2 上取整；</p></li><li><p>如果根结点不是叶子结点，它至少有两个子节点；</p></li><li><p>有 k 个子结点的非叶子结点有 k - 1 元素，且元素之间升序排列，即满足 k[i] &lt; k[i+1]；</p></li><li><p>所有的叶子结点位于同一层。</p></li></ul><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// 查找键值为 k 的树节点</span></span>
<span class="line">BTreeNode<span class="token operator">*</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">++</span>i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaf <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 递归查询</span></span>
<span class="line">    <span class="token keyword">return</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">search</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="b-树-1" tabindex="-1"><a class="header-anchor" href="#b-树-1"><span>B+ 树</span></a></h3><h3 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树"><span>红黑树</span></a></h3><p><strong>性质</strong></p><ul><li><p>节点为红色或黑色</p></li><li><p>NIL 节点（空叶子节点）为黑色</p></li><li><p>红色节点的子节点为黑色</p></li><li><p>从根节点到 NIL 节点每条路径上黑色节点数目相同</p></li></ul>`,46)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/algorithm/data_structure.html","title":"数据结构","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752157449000,"contributors":[{"name":"mgkl92","username":"mgkl92","email":"zst_lff@126.com","commits":1,"url":"https://github.com/mgkl92"}],"changelog":[{"hash":"fe3e92b79c5ccc97720e31b2002a0ab509a32be5","time":1752157449000,"email":"zst_lff@126.com","author":"mgkl92","message":"Add more notes"}]},"filePathRelative":"algorithm/data_structure.md"}');export{i as comp,u as data};
